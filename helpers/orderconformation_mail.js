import nodemailer from "nodemailer";
// import puppeteer from "puppeteer";
import fs from "fs";
import moment from "moment";
import path from "path";
import puppeteer from "puppeteer-core";


export async function sendOrderConfirmation(
  email,
  customer_name,
  delivery_address,
  products = [],
  order_id
) {
  const totalPrice = products.reduce((sum, p) => sum + p.price * p.quantity, 0);
  // const orderId = `BOT${Math.floor(100000 + Math.random() * 900000)}`;
  const orderId = `BOT${order_id}`;
  const orderDate = moment().format("YYYY-MM-DD HH:mm");
  const pdfPath = `./order_${Date.now()}.pdf`;

  const htmlContent = `
    <html>
      <head>
        <style>
          body {
            font-family: Arial, sans-serif;
            padding: 20px;
            color: #333;
          }
          h2 {
            color: #4CAF50;
          }
          table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
          }
          th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
          }
          th {
            background-color: #f2f2f2;
          }
          .footer {
            margin-top: 30px;
            font-size: 12px;
            color: #888;
            text-align: center;
          }
        </style>
      </head>
      <body>
        <h2>ðŸ›’ BotBasket Order Confirmation</h2>
        <p><strong>Order ID:</strong> ${orderId}</p>
        <p><strong>Order Date:</strong> ${orderDate}</p>
        <p><strong>Customer Name:</strong> ${customer_name}</p>
        <p><strong>Delivery Address:</strong> ${delivery_address}</p>

        <h3>ðŸ§¾ Order Summary</h3>
        <table>
          <thead>
            <tr>
              <th>Product</th>
              <th>Qty</th>
              <th>Price</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            ${products
      .map(
        (p) => `
              <tr>
                <td>${p.name}</td>
                <td>${p.quantity}</td>
                <td>â‚¹${p.price.toFixed(2)}</td>
                <td>â‚¹${(p.price * p.quantity).toFixed(2)}</td>
              </tr>
            `
      )
      .join("")}
          </tbody>
        </table>

        <h3 style="text-align:right;">Total Price: â‚¹${totalPrice.toFixed(
        2
      )}</h3>

        <p style="text-align:center;">Thank you for shopping with <strong>BotBasket</strong>!</p>
        <p style="text-align:center;">We appreciate your trust and look forward to serving you again.</p>

        <div class="footer">
          This is an automated invoice generated by BotBasket.
        </div>
      </body>
    </html>
  `;

  // âœ… Generate PDF using Puppeteer
  //   const browser = await puppeteer.launch({ headless: "new" });

  const browser = await puppeteer.launch({
    executablePath:
      "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", // Path to your system Chrome
    headless: "new",
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });
  const page = await browser.newPage();
  //   await page.setContent(htmlContent);
  await page.setContent(htmlContent, { waitUntil: "domcontentloaded" }); // faster than networkidle0
  await page.pdf({ path: pdfPath, format: "A4", printBackground: true });

  await browser.close();

  // Simple, faster

  // âœ… Nodemailer setup
  const transport = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.MAIL_USERNAME,
      pass: process.env.MAIL_PASSWORD,
    },
  });

  // âœ… Email Body
  const mailOptions = {
    from: `"BotBasket" <${process.env.MAIL_USERNAME}>`,
    to: email.toLowerCase(),
    subject: "ðŸ›’ Your BotBasket Order Confirmation",
    html: `
      <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <h2 style="color: #4CAF50;">Hello ${customer_name},</h2>
        <p>Thank you for shopping with <strong>BotBasket</strong>! Your order has been successfully placed.</p>
        
        <h3>ðŸ§¾ Order Summary</h3>
        <p><strong>Total Price:</strong> â‚¹${totalPrice.toFixed(2)}</p>
        <p><strong>Delivery Address:</strong> ${delivery_address}</p>

        <p>We've attached a detailed invoice for your reference.</p>

        <p style="margin-top: 30px;">We appreciate your trust in us. If you have any questions, feel free to reply to this email.</p>
        <p>Happy Shopping!<br/><strong>Team BotBasket</strong></p>

        <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;" />
        <p style="font-size: 12px; color: #888;">This is an automated email. Please do not reply to it.</p>
      </div>
    `,
    attachments: [
      {
        filename: "order-confirmation.pdf",
        path: pdfPath,
        contentType: "application/pdf",
      },
    ],
  };

  try {
    await transport.sendMail(mailOptions);
    fs.unlinkSync(pdfPath);
    return { status: true, message: "Order confirmation email sent!" };
  } catch (err) {
    console.error("Email sending error:", err);
    return { status: false, message: "Failed to send email" };
  }
}
